unit uDmRelatorios;

interface

uses
  System.SysUtils, System.Classes, frxClass, frxDBSet, frxExportBaseDialog, frxExportPDF, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.Phys.FB, FireDAC.Phys.FBDef, FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, FireDAC.VCLUI.Wait, FireDAC.Phys.IBBase, FireDAC.Comp.UI, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client;

type
  TDmRelatorios = class(TDataModule)
    DesignerRelatorio: TfrxReport;
    DesignerDBDataSet: TfrxDBDataset;
    DesignerConexao: TFDConnection;
    QrRelBanco: TFDQuery;
    FDGUIxWaitCursor1: TFDGUIxWaitCursor;
    FDPhysFBDriverLink1: TFDPhysFBDriverLink;
    procedure DataModuleCreate(Sender: TObject);
  private

    { Private declarations }
  public
    Function Relatorio(Params: TStringList): String;
  end;

var
  DmRelatorios: TDmRelatorios;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}


uses Relatorios.Classe;

{$R *.dfm}


procedure TDmRelatorios.DataModuleCreate(Sender: TObject);
begin
  // Para não mostrar ao abrir o relatorio em modo disigner em runtime
  DesignerDBDataSet.Enabled := false;
end;

Function TDmRelatorios.Relatorio(RelName: String; Params: TStringList): String;
var
  lRelatorio: TRelatorio;
  PathRel: String;
begin
  PathRel := IncludeTrailingPathDelimiter(ExtractFilePath(ParamStr(0)) + 'relatorios');
  PathRel := PathRel + 'RelBanco.fr3';

  Try
    lRelatorio := TRelatorio.Create;
    Try
      if FileExists(PathRel) then
      begin
        lRelatorio.DBDataset.DataSet := DmRelatorios.QrRelBanco;
        lRelatorio.Report.LoadFromFile(PathRel);
        Result := lRelatorio.Exportar(ExtractFileName(PathRel));
        if Not FileExists(Result) then
          raise Exception.Create(UTF8Encode('Nâo foi possivel gerar o relatório'));
      end
      else
        raise Exception.Create(UTF8Encode('Nâo foi possível carrega o arquvivo ' + PathRel));
    Finally
      FreeAndNil(lRelatorio);
    End;

  Except
    On E: Exception do
      Result := '{"result":false,"message":"' + UTF8Encode(E.Message) + '"}';

  End;

end;

end.
