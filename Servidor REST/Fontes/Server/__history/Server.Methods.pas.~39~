unit Server.Methods;

interface

Uses Rest.Config, System.Classes, IdCustomHTTPServer, System.JSON;

Type
  TServerMethods = Class
  private

  Public
    Function Upload(Method: TMethods; ARequestInfo: TIdHTTPRequestInfo): String;
    Procedure Download(Method: TMethods; ARequestInfo: TIdHTTPRequestInfo; var AResponseInfo: TIdHTTPResponseInfo);
    procedure Relatorios(Method: TMethods; ARequestInfo: TIdHTTPRequestInfo; var AResponseInfo: TIdHTTPResponseInfo);

    Function Banco(Method: TMethods; Params: TStringList): String;

  End;

implementation

{ TServerMethods }

uses
  Banco.Controle,
  Files.Upload,
  Files.Download,
  System.SysUtils, Relatorios.Classe, uDmRelatorios;

Function TServerMethods.Banco(Method: TMethods; Params: TStringList): String;
begin

  with TControleBanco.Create do
  begin

    Try

      case Method of
        mGet:
          Result := Get(Params);
        mPost:
          Result := Post(Params);
        mPut:
          Result := Put(Params);
        mDelete:
          Result := Delete(Params);
      end;
    Finally
      Free
    End;
  end;

end;

Procedure TServerMethods.Download(Method: TMethods; ARequestInfo: TIdHTTPRequestInfo; var AResponseInfo: TIdHTTPResponseInfo);
var
  ParamName, ParamValue: String;
  FDir, RootPath, FileName, FileType: String;
  FDocument: TStringList;
  i: Integer;
begin

  RootPath := ExtractFilePath(ParamStr(0));

  Try
    FDocument := TStringList.Create;
    try
      FDocument.Delimiter := '/';
      FDocument.StrictDelimiter := true;
      FDocument.DelimitedText := ARequestInfo.Document;
      FDocument.Delete(0);

      FDir := EmptyStr;
      for i := 0 to FDocument.count - 1 do
      begin
        if DirectoryExists(RootPath + FDocument[i]) then
          FDir := IncludeTrailingPathDelimiter(RootPath + FDocument[i])
        else if FileExists(FDir + FDocument[i]) then
          FileName := FDir + FDocument[i]

      end;

    finally
      FreeAndNil(FDocument);
    end;

    if FileExists(FileName) then
    begin

      with TControleDownload.Create do
      begin

        Try
          if Method = mGet then
          begin
            FileType := GetFileType(ExtractFileName(FileName));
            AResponseInfo.ContentText := EmptyStr;
            AResponseInfo.ContentType := FileType;
            // Obrigar o navegador a fazer o download
            if FileType = 'application/octet-stream' then
              AResponseInfo.ContentDisposition := 'attachment; filename="' + ExtractFileName(FileName) + '"';
            AResponseInfo.ContentStream := TFileStream.Create(FileName, fmOpenRead and fmShareDenyWrite);;
            AResponseInfo.ContentLength := -1;
          end
          else
            raise Exception.Create('O Method não é suportado para o  download de arquivo');

        Finally
          Free;
        End;
      end; // with
    end
    else
    begin
      AResponseInfo.ContentType := 'text/html';
      AResponseInfo.ResponseNo := 403;
      AResponseInfo.ContentText := 'O arquivo ' + ExtractFileName(FileName) + ' não foi localizado no servidor!!';
    end;

  Except
    On E: Exception do
      AResponseInfo.ContentText := '{"result":false,"message":"' + E.Message + '"}';
  End;

end;

Function TServerMethods.Upload(Method: TMethods; ARequestInfo: TIdHTTPRequestInfo): String;
var
  vParams: TStringList;
  ParamName, ParamValue: String;
begin

  Try

    if ARequestInfo.Params.count > 0 then
    begin
      ParamName := ARequestInfo.Params.Names[0];
      ParamValue := ARequestInfo.Params.Values[ParamName];
    end;

    vParams := TStringList.Create;
    vParams.Add(ParamName + '=' + ParamValue);

    with TControleFileUpload.Create do
    begin

      Try
        if Method = mPost then
        begin
          if Upload('files', ARequestInfo) then
            Result := '{"result":true,"message":"Arquivo recebido com sucesso"}'
          else
            raise Exception.Create('Não foi possível receber o arquivo');
        end
        else
          raise Exception.Create('O Method não é suportado para o  envio de arquivo');

      Finally
        Free;
      End;

    end;

  Except
    On E: Exception do
      Result := '{"result":false,"message":"' + E.Message + '"}';
  End;

end;

Procedure TServerMethods.Relatorios(Method: TMethods; ARequestInfo: TIdHTTPRequestInfo; var AResponseInfo: TIdHTTPResponseInfo);
var
  ParamName, ParamValue: String;
  RootPath, RelName, FileName, FileType: String;
  FDocument: TStringList;
  i: Integer;
begin

  RootPath := ExtractFilePath(ParamStr(0));

  Try

    FDocument := TStringList.Create;
    try
      FDocument.Delimiter := '/';
      FDocument.StrictDelimiter := true;
      FDocument.DelimitedText := ARequestInfo.Document;
      FDocument.Delete(0);

      if FDocument.count = 2 then
        RelName := FDocument[1];
    finally
      FreeAndNil(FDocument);
    end;

    if ARequestInfo.Params.count > 0 then
    begin
      ParamName := ARequestInfo.Params.Names[0];
      ParamValue := LowerCase(ARequestInfo.Params.Values[ParamName]);
    end;

    with TRelatorio.Create do
    begin

      Try

        if RelName = 'bancos' then
          FileName := Bancos.Exportar();

        if FileExists(FileName) then
        begin
          if ParamValue = 'data' then
          begin
            AResponseInfo.ContentType := 'application/json';
            FileType := 'application/pdf';
            AResponseInfo.ContentText := EmptyStr;
            AResponseInfo.ContentType := FileType;
            AResponseInfo.ContentStream := TFileStream.Create(FileName, fmOpenRead and fmShareDenyWrite);;
            AResponseInfo.ContentLength := -1;
          end
          else
            AResponseInfo.ContentText := '{"result":true,"message":"O Relatorio gerado com sucesso","filename":"' + UTF8Encode(ExtractFileName(FileName)) + '"}';

        end
        else
        begin

          AResponseInfo.ResponseNo := 403;
          AResponseInfo.ContentText := '{"result":false,"message":"O Relatorio ' + RelName + ' não foi localizado no servidor!!"}';
        end;

      Finally
        Free;
      End;
    end; // with

  Except
    On E: Exception do
      AResponseInfo.ContentText := '{"result":false,"message":"' + E.Message + '"}';
  End;

end;

end.
